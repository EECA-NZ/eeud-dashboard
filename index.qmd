--- 
title: "Energy End-Use Database"
logo: "https://eecagovtnz.sharepoint.com/SiteAssets/__rectSitelogo__Only%20EECA%20white.png"
format: 
  dashboard:
    theme: "eeca.scss"
    expandable: false
    include-in-header: google-analytics.html
server: shiny
---

```{python}
import re
import math
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from shiny import render, reactive, ui
from shinywidgets import render_widget, render_plotly
from faicons import icon_svg
import asyncio
import random
from datetime import date
import numpy as np

eeud = pd.read_csv('./data/EEUD-03042024.csv').set_index('Row')
eeud['PeriodEndDate'] = pd.to_datetime(eeud['PeriodEndDate'])
eeud_colours = pd.read_csv('./data/eeud-colour-palette.csv', index_col=0, header=0, dtype=str).squeeze("columns")
eeud_colours = eeud_colours[~eeud_colours.index.duplicated()]
eeud_colours.index = eeud_colours.index.map(lambda l: str(l).strip() if 'Unknown' not in l else l)

eeud_colours_by_dimension = pd.read_csv('./data/eeud-colour-palette-by-dimension.csv', header=0, dtype=str).squeeze("columns").set_index(['Label', 'Dimension'])
eeud_colours_by_dimension = eeud_colours_by_dimension[~eeud_colours_by_dimension.index.duplicated()]

fill_unknown_columns = ['EndUse', 'Fuel', 'Sector', 'Technology', 'EndUseGroup', 'FuelGroup', 'SectorGroup', 'TechnologyGroup']

for column in fill_unknown_columns:
    if column in eeud.columns:
        eeud[column] = eeud[column].fillna('Unknown')

eeud['Technology'] = eeud['Technology'].apply(lambda t: str(t).strip() if 'Unknown' not in t else t)

sector_groups_list = list(eeud['SectorGroup'].dropna().sort_values().unique())
sectors_list = list(eeud['Sector'].dropna().sort_values().unique())
fuels_list = list(eeud['Fuel'].dropna().sort_values().unique())
technology_groups_list = list(eeud['TechnologyGroup'].dropna().sort_values().unique())
technologies_list = list(eeud['Technology'].dropna().sort_values().unique())
years_list = list(eeud['Period'].dropna().sort_values(ascending=False).unique())
end_uses_list = list(eeud['EndUse'].dropna().sort_values().unique())
sector_groups = {group: set(sub_df['Sector'].dropna()) for group, sub_df in eeud.groupby('SectorGroup')}

```

```{python}
#| include: false
def title_case(s):
    return re.sub(r"(_|-)+", " ", s).title().replace(" ", "")

def hex_to_rgba(hex, alpha=1):
    hex = hex.replace('#','')
    return f"rgba{tuple([int(hex[i:i+2], 16) for i in (0, 2, 4)] + [alpha])}"

def colormap(label, dimension):
    """
    Attempt to retrieve the color from the DataFrame

    If the (label, dimension) pair doesn't exist, return a default color
    """
    try:
        color = eeud_colours_by_dimension.at[(label, dimension), 'Colour']
    except KeyError:
        color = "#9CA2B0"
    return color

def create_sankey_links_for_dict(df, *columns):
    """
    Creates a dictionary suitable for generating Sankey diagram links with indices corresponding to labels.
    
    Parameters:
    - df: pandas DataFrame containing the base data.
    - columns: variable number of arguments, each a string representing a column name
      in df that corresponds to a node in the Sankey diagram.
    
    Returns:
    - A dictionary with 'source', 'target', and 'value' keys ready to be used as input for a Sankey diagram.
    - A list of unique labels corresponding to all nodes in the Sankey diagram.
    """
    links_list = []
    labels = []
    label_dim_colors = []

    # Create temporary source and target columns in the DataFrame based on the provided columns
    for i in range(len(columns) - 1):

        # Create renamed columns in the DataFrame. Group by these and calculate sum.
        src = f'{columns[i]}'
        tgt = f'{columns[i+1]}'
        df['source'] = df[src].astype(str)
        df['target'] = df[tgt].astype(str)
        temp_df = df.groupby(['source', 'target'])['TJ'].sum().reset_index()

        # Assemble full list of nodes (identified by label + dimension) and their colours
        labels.extend(temp_df['source'].tolist())
        labels.extend(temp_df['target'].tolist())
        for lbl in temp_df['source']:
            col = colormap(lbl, src)
            label_dim_colors.append((lbl, src, col))
        for lbl in temp_df['target']:
            col = colormap(lbl, tgt)
            label_dim_colors.append((lbl, tgt, col))

        # Identify nodes by both the label and the dimension (column name)
        temp_df['source'] = temp_df.apply(lambda row: (row['source'], src), axis=1)
        temp_df['target'] = temp_df.apply(lambda row: (row['target'], tgt), axis=1)
        links_list.append(temp_df)

    # Remove duplicate labels and sort
    label_dim_colors = sorted(set(label_dim_colors))

    # Identify nodes by their label (e.g. 'Electricity') and dimension (e.g. 'Fuel').
    nodes = [(x[0], x[1]) for x in label_dim_colors]
    node_labels = [x[0] for x in label_dim_colors]
    node_colors = [x[2] for x in label_dim_colors]
    
    # Create the final links DataFrame
    links_df = pd.concat(links_list, ignore_index=True)

    # Map 'source' and 'target' to their indices in the labels list
    links_df['source'] = links_df['source'].apply(lambda x: nodes.index(x))
    links_df['target'] = links_df['target'].apply(lambda x: nodes.index(x))
    
    # Aggregate and sum 'value' for each unique source-target pair
    links_df = links_df.groupby(['source', 'target'], as_index=False)['TJ'].sum()

    # Assemble the lists and organize for Sankey diagram
    source = links_df['source'].tolist()
    target = links_df['target'].tolist()
    value = links_df['TJ'].tolist()
    link_colors = [hex_to_rgba(node_colors[s], 0.8) for s in source]
    node_colors = [hex_to_rgba(c, 1.0) for c in node_colors]

    # Organize link information
    link_dict = {
        'source': source,
        'target': target,
        'value': value,
        'color': link_colors
    }

    # Organize node information
    nodes_dict = {
        'label': node_labels,
        'color': node_colors
    }

    return link_dict, nodes_dict

def create_alluvial_links_for_dict(df, category_column, date_column, date_freq='Y'):
    """
    Creates dictionaries suitable for generating an alluvial diagram with indices corresponding to labels,
    mapping the 'TJ' of each category across continuous values of another column (date column).
    
    Parameters:
    - df: pandas DataFrame containing the base data.
    - category_column: string representing the column name in df that corresponds to categories.
    - date_column: string representing the date column in df for mapping across time.
    - date_freq: string specifying the frequency to aggregate dates (e.g., 'Y' for year, 'M' for month).
    
    Returns:
    - A dictionary with 'source', 'target', and 'value' keys ready to be used as input for a Sankey diagram.
    - A list of unique labels corresponding to all nodes in the Sankey diagram.
    """
    # Convert the date column to the specified frequency period
    df = df.copy()
    df[date_column] = df[date_column].dt.to_period(date_freq)
    
    # Group by category and date period, then sum the TJ
    grouped_df = df.groupby([category_column, date_column])['TJ'].sum().reset_index()
    
    # Create source and target columns by shifting the date period to link successive periods
    grouped_df['source'] = grouped_df.apply(lambda x: f"{x[category_column]}_{x[date_column]}", axis=1)
    grouped_df['target'] = grouped_df.apply(lambda x: f"{x[category_column]}_{x[date_column] + 1}", axis=1)
    
    # Generate labels from source and target columns
    labels = sorted(set(grouped_df['source'].tolist() + grouped_df['target'].tolist()))
    
    # Map 'source' and 'target' to their indices in the labels list
    grouped_df['source'] = grouped_df['source'].apply(lambda x: labels.index(x))
    grouped_df['target'] = grouped_df['target'].apply(lambda x: labels.index(x))
    
    # Prepare the link and nodes dictionaries
    link_dict = {
        'source': grouped_df['source'].tolist()[:-1], # Exclude the last mapping as it has no next period
        'target': grouped_df['target'].tolist()[:-1],
        'value': grouped_df['TJ'].tolist()[:-1],
        'color': grouped_df['source'].apply(lambda s: hex_to_rgba(eeud_colours[labels[s].split('_')[0]] if labels[s].split('_')[0] in eeud_colours else "#CBCDD5", 2/3)).tolist()
    }

    nodes_dict = {
        'label': list(map(lambda l: l.replace('_', ' '), labels)),
        'color': list(map(lambda l: hex_to_rgba(eeud_colours[l.split('_')[0]] if l.split('_')[0] in eeud_colours else "#CBCDD5", 1), labels))
    }

    return link_dict, nodes_dict

```

# Overview

## Row

### Column

#### Row {.toolbar}
<div style="flex-grow: 1; text-align: left;"><p style="font-size: 1rem; padding-top: 1rem; line-height: 0px;">Values presented for 2022</p></div>
<div style="flex-grow: 0; text-align: right; padding-left: 0.375px;">
```{python}
ui.input_select("highlight_category", "Showcase", choices=["End Use", "Fuel", "Sector", "Technology"], selected="Fuel")
```
</div>

#### Row

```{python}
@render.ui
def total_use():
    return ui.value_box(
        f"Total Energy Use {max(eeud.Period)} (TJ)",
        f"{round(eeud[eeud.Period==max(eeud.Period)]['TJ'].sum()/1000)*1000:,}",
        showcase=ui.HTML('''
            <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi bi-lightning-charge" viewBox="0 0 16 16">
                <path d="M11.251.068a.5.5 0 0 1 .227.58L9.677 6.5H13a.5.5 0 0 1 .364.843l-8 8.5a.5.5 0 0 1-.842-.49L6.323 9.5H3a.5.5 0 0 1-.364-.843l8-8.5a.5.5 0 0 1 .615-.09zM4.157 8.5H7a.5.5 0 0 1 .478.647L6.11 13.59l5.732-6.09H9a.5.5 0 0 1-.478-.647L9.89 2.41z"/>
            </svg>
        '''),
        theme="secondary",
        showcase_layout="left center",
    )
```

#### Row {height=80%}

```{python}
#| title: Energy Usage Trend
#| expandable: true
@render_widget
def display_trend():
    category = title_case(input.highlight_category())
    group = category + "Group"
    eeud_subset = eeud[~pd.isna(eeud[category])].copy()
    to_replace = ['Bus', 'Freight Rail', 'Heavy Truck', 'Light Commercial Vehicle', 'Light Passenger Vehicle', 'Medium Truck', 'Motorcycle', 'Passenger Rail', 'Plane', 'Ship', 'Very Heavy Truck']
    eeud_subset['TechnologyGroup'] = eeud_subset['TechnologyGroup'].apply(lambda g: 'Transport' if g in to_replace else g)

    grouped = eeud_subset.groupby([group, 'Period']).sum(numeric_only=True).reset_index()
    total_tj_by_period = grouped.groupby('Period')['TJ'].sum().reset_index(name='TotalTJ')
    merged = pd.merge(grouped, total_tj_by_period, on='Period')
    merged['TJ_Proportion'] = (merged['TJ'] / merged['TotalTJ']) * 100

    fig = px.area(merged,
        y='TJ', x='Period', color=group, color_discrete_map=eeud_colours.to_dict(), 
        markers=True, hover_data={group: True, 'TJ_Proportion': True}).update_xaxes(dtick=1)
    fig.update_traces(hovertemplate="%{customdata[0]} / %{x}<br>%{y:,.0f} TJ (%{customdata[1]:.1f}%)<extra></extra>")
    fig.update_layout(yaxis=dict(title=f"Total Energy Usage (TJ)"))
    fig.update_layout(legend=dict(
        orientation="h",
        yanchor="bottom", y=1.02,
        xanchor="left", x=0))
    fig.update_xaxes(dtick=1)
    fig.update_layout(font_family="Barlow")
    fig.update_layout(modebar_remove=['zoom', 'pan', 'select', 'lasso', 'zoomin', 'zoomout', 'autoscale'])
    fig.update_layout(modebar_bgcolor='rgba(0,0,0,0)', modebar_color='rgba(22,64,87,255)')
    fig.update_layout(paper_bgcolor='rgba(232,236,238,255)', plot_bgcolor='rgba(232,236,238,255)')
    return fig

```

### Column {width=60%}

#### Row

```{python}
@render.ui
def largest_use():
    category = title_case(input.highlight_category())
    max_year = eeud['Period'].max()
    data_last_year = eeud[(eeud['Period'].isin([max_year]))&(~eeud[category].str.contains('Unknown'))]
    summed_data = data_last_year.groupby(category).agg({'TJ': 'sum'})
    max_use = summed_data['TJ'].idxmax()

    return ui.value_box(
        max_use if len(max_use) <=32 else max_use[:32]+"...",
        f"{round(summed_data['TJ'].max()/10)*10:,} TJ",
        f"Largest {category}",
        showcase=ui.HTML('''
            <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi bi-bar-chart-line" viewBox="0 0 16 16">
                <path d="M11 2a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v12h.5a.5.5 0 0 1 0 1H.5a.5.5 0 0 1 0-1H1v-3a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v3h1V7a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v7h1zm1 12h2V2h-2zm-3 0V7H7v7zm-5 0v-3H2v3z"/>
            </svg>
        '''),
        theme="secondary",
        showcase_layout="left center",
    )
```

```{python}
@render.ui
def largest_increase():
    category = title_case(input.highlight_category())
    max_year = eeud['Period'].max()
    data_last_two_years = eeud[(eeud['Period'].isin([max_year, max_year - 1]))&(~eeud[category].str.contains('Unknown'))]
    summed_data = data_last_two_years.groupby([category, 'Period']).agg({'TJ': 'sum'}).unstack()
    summed_data['growth'] = summed_data[('TJ', max_year)] - summed_data[('TJ', max_year - 1)]
    max_growth = summed_data['growth'].idxmax()

    return ui.value_box(
        max_growth,
        f"{round(summed_data['growth'].max()/10)*10:,} TJ",
        "Largest Increase YoY",
        showcase=ui.HTML('''
            <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi bi-graph-up-arrow" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M0 0h1v15h15v1H0zm10 3.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-1 0V4.9l-3.613 4.417a.5.5 0 0 1-.74.037L7.06 6.767l-3.656 5.027a.5.5 0 0 1-.808-.588l4-5.5a.5.5 0 0 1 .758-.06l2.609 2.61L13.445 4H10.5a.5.5 0 0 1-.5-.5"/>
            </svg>
        '''),
        theme="secondary",
        showcase_layout="left center",
    )
```

```{python}
@render.ui
def largest_decrease():
    category = title_case(input.highlight_category())
    max_year = eeud['Period'].max()
    data_last_two_years = eeud[(eeud['Period'].isin([max_year, max_year - 1]))&(~eeud[category].str.contains('Unknown'))]
    summed_data = data_last_two_years.groupby([category, 'Period']).agg({'TJ': 'sum'}).unstack()
    summed_data['growth'] = summed_data[('TJ', max_year)] - summed_data[('TJ', max_year - 1)]
    min_growth = summed_data['growth'].idxmin()

    return ui.value_box(
        min_growth,
        f"{round(summed_data['growth'].min()/10)*10:,} TJ",
        "Largest Decrease YoY",
        showcase=ui.HTML('''
            <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi bi-graph-down-arrow" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M0 0h1v15h15v1H0zm10 11.5a.5.5 0 0 0 .5.5h4a.5.5 0 0 0 .5-.5v-4a.5.5 0 0 0-1 0v2.6l-3.613-4.417a.5.5 0 0 0-.74-.037L7.06 8.233 3.404 3.206a.5.5 0 0 0-.808.588l4 5.5a.5.5 0 0 0 .758.06l2.609-2.61L13.445 11H10.5a.5.5 0 0 0-.5.5"/>
            </svg>
        '''),
        theme="secondary",
        showcase_layout="left center",
    )
```

#### Row {height=74%}
```{python}
#| title: Energy Usage Map
#| expandable: true
@render_widget
def display_treemap():
    # Aggregate TJ energy usage by Group and Category.
    category = title_case(input.highlight_category())
    group = category + "Group"
    eeud_subset = eeud[(~pd.isna(eeud[category]))].copy()
    to_replace = ['Bus', 'Freight Rail', 'Heavy Truck', 'Light Commercial Vehicle', 'Light Passenger Vehicle', 'Medium Truck', 'Motorcycle', 'Passenger Rail', 'Plane', 'Ship', 'Very Heavy Truck']
    eeud_subset['TechnologyGroup'] = eeud_subset['TechnologyGroup'].apply(lambda g: 'Transport' if g in to_replace else g)
    data_last_year = eeud_subset[eeud_subset['Period'].isin([eeud_subset['Period'].max()])]
    eeud_aggregated = data_last_year.groupby([group, category], as_index=False).agg({'TJ': 'sum'})

    # Prepare a DataFrame for Plotly.
    # Add an 'id' for each Category combining it with Group to ensure uniqueness.
    eeud_aggregated['id'] = eeud_aggregated[group] + '-' + eeud_aggregated[category]
    eeud_aggregated['parent'] = eeud_aggregated[group]

    # For EndUseGroup nodes, we set their parent to '' indicating they are top-level.
    groups_df = pd.DataFrame({
        group: eeud_aggregated[group].unique(),
        category: [''] * len(eeud_aggregated[group].unique()),
        'TJ': [eeud_aggregated[eeud_aggregated[group]==g]['TJ'].sum() for g in eeud_aggregated[group].unique()],  # [0] * len(eeud_aggregated[group].unique()),
        'id': eeud_aggregated[group].unique(),
        'parent': [input.highlight_category()] * len(eeud_aggregated[group].unique())
    })

    # Combine group nodes and category nodes.
    complete_df = pd.concat([groups_df, eeud_aggregated], ignore_index=True, sort=False)
    complete_df['label'] = complete_df[category].where(complete_df[category] != '', complete_df[group])
    complete_df['colour'] = complete_df[category].map(eeud_colours).fillna('#FFFFFF')

    # Function to manually wrap long labels to fit
    def split_label(label, max_chars=25):
        words = label.split()
        current_line = ''
        lines = []
        for word in words:
            if len(current_line) + len(word) + 1 <= max_chars:
                current_line += word + ' '
            else:
                lines.append(current_line.strip())
                current_line = word + ' '
        lines.append(current_line.strip())  # Last line
        return '<br>'.join(lines)  # Join lines with the HTML <br> tag
    def clean_label(label):
        return label.replace('<br>',' ')

    # Apply the split function to the labels column
    complete_df['styled_label'] = complete_df['label'].apply(split_label)

    # Plotting the treemap
    fig = go.Figure(data=[go.Treemap(
        ids=complete_df['id'],
        labels=complete_df['styled_label'],
        parents=complete_df['parent'],
        values=complete_df['TJ'].fillna(0).astype('int'),
        #marker=dict(colors=complete_df['colour']),
        #texttemplate="<span style='font-size:15.3px; font-weight:500;'>%{label}</span><br><span>%{value}</span>",
        textposition="middle center",
        branchvalues="total",
        hoverinfo='value',
        hovertemplate='%{label}<br>%{value} TJ<extra></extra>'
    )])
   
    fig.update_traces(marker_colors=[eeud_colours[clean_label(parent)] for parent in fig.data[-1].labels])
    fig.update_layout(font_family="Barlow")
    fig.update_layout(margin=dict(t=0, l=0, r=0, b=0))
    fig.update_layout(modebar_bgcolor='rgba(0,0,0,0)', modebar_color='rgba(22,64,87,255)')
    fig.update_layout(paper_bgcolor='rgba(232,236,238,255)', plot_bgcolor='rgba(232,236,238,255)')

    return fig

```


# Explore

## Row

### Column {.sidebar}
<h5>Display</h5>

```{python}
ui.input_select("explore_left_node", "From", choices=["End Use", "End Use Group", "Fuel", "Fuel Group", "Sector", "Sector Group", "Technology", "Technology Group"], selected="Fuel")
ui.input_select("explore_right_node", "To", choices=["End Use", "End Use Group", "Fuel", "Fuel Group", "Sector", "Sector Group", "Technology", "Technology Group"], selected="End Use Group")
```

<br/>
<h5>Filter</h5>

```{python}
sectors_dict = {'Residential': ['All Residential', 'Residential', 'Residential Unallocated'],
    'Industrial': ['All Industrial', 'Construction', 'Dairy', 'Manufacturing']}

ui.input_selectize('explore_end_use', "End Use", end_uses_list, multiple=True,
    options={
        'placeholder': "All End Uses",
        'plugins': ['clear_button']
    }
)

ui.input_selectize('explore_fuels', "Fuel Type", fuels_list, multiple=True, 
    options={
        'placeholder': "All Fuel Types",
        'plugins': ['clear_button']
    }
)

ui.input_selectize('explore_sectors', "Sector", sectors_list, multiple=True,
    options={
        'placeholder': "All Sectors",
        'plugins': ['clear_button']
    }
)

ui.input_selectize('explore_technologies', "Technology", technologies_list, multiple=True,
    options={
        'placeholder': "All Technologies",
        'plugins': ['clear_button']
    }
) 

ui.input_slider('explore_period', "Period", min=min(years_list), max=max(years_list),
    drag_range=False, value=max(years_list), sep='')


@reactive.Calc
def explore_eeud_filtered():
    data = eeud.copy()

    if len(input.explore_sectors()) > 0:
        data = data[data['Sector'].isin(input.explore_sectors())]

    if len(input.explore_fuels()) > 0:
        data = data[data['Fuel'].isin(input.explore_fuels())]

    if len(input.explore_technologies()) > 0:
        data = data[data['Technology'].isin(input.explore_technologies())]

    if len(input.explore_end_use()) > 0:
        data = data[data['EndUse'].isin(input.explore_end_use())]

    data = data[data['Period'] == input.explore_period()]

    return data

```

<br/>
<h5>Data View</h5>

```{python}
@render.download(
    label="Download CSV",
    filename=lambda: f"explore-{date.today().isoformat()}-{np.random.randint(100, 999)}.csv"
)
async def download_explore_filtered_data():
    data = explore_eeud_filtered()  # Ensure that this fetch is thread-safe or handled correctly within the async context
    csv_data = data.to_csv(index=False)
    await asyncio.sleep(0.25)  # Simulating some processing time
    yield csv_data
```

### Column

```{python}
#| content: card-toolbar
# https://github.com/posit-dev/py-shiny/issues/973

@render.ui
def render_bar_button():
    btn_class = 'btn-primary' if explore_chart_type.get() == 'Bar' else 'btn-secondary'
    return ui.input_action_button("explore_bar", "Bar Chart", class_=btn_class)
@reactive.effect
def set_explore_bar_chart():
    input.explore_bar()
    with reactive.isolate():
        explore_chart_type.set('Bar')
    ui.update_select('explore_left_node', label="Axis")
    ui.update_select('explore_right_node', label="Stack")

@render.ui
def render_sankey_button():
    btn_class = 'btn-primary' if explore_chart_type.get() == 'Sankey' else 'btn-secondary'
    return ui.input_action_button("explore_sankey", "Sankey Chart", class_=btn_class)
@reactive.effect
def set_explore_sankey_chart():
    input.explore_sankey()
    with reactive.isolate():
        explore_chart_type.set('Sankey')
    ui.update_select('explore_left_node', label="From")
    ui.update_select('explore_right_node', label="To")

```

```{python}
#| title: Stationary Energy Usage

# Initialize a reactive value
explore_chart_type = reactive.value('Sankey')

@render_widget
def display_explore_chart():
    left_node = title_case(input.explore_left_node())
    right_node = title_case(input.explore_right_node())
    explore_df = explore_eeud_filtered()
    
    if left_node == right_node:
        explore_df['Proxy'] = 'Total Energy Use'
        right_node = 'Proxy'

    explore_df = explore_df.groupby([left_node, right_node]).sum(numeric_only=True).reset_index(drop=False)

    if explore_chart_type.get() == 'Sankey':
        
        explore_links, explore_nodes = create_sankey_links_for_dict(explore_df, left_node, right_node)
        fig = go.Figure(data=[go.Sankey(
            node = dict(
                pad = 15,
                thickness = 20,
                line = dict(width = 0),
                label = explore_nodes['label'],
                color = explore_nodes['color'],
                hovertemplate="%{label}<br>%{value:,.0f}<extra></extra>"
                ),
            link = dict(
                source = explore_links['source'],
                target = explore_links['target'],
                value = explore_links['value'],
                color = explore_links['color'],
                hovertemplate="%{source.label} → %{target.label}<br>%{value:,.0f} TJ<extra></extra>"
                )
        )])
        fig.update_layout(font_family="Barlow")
        fig.update_layout(modebar_remove=['zoom', 'pan', 'select', 'lasso', 'zoomin', 'zoomout', 'autoscale'])
        fig.update_layout(modebar_bgcolor='rgba(0,0,0,0)', modebar_color='rgba(22,64,87,255)')
        fig.update_layout(paper_bgcolor='rgba(232,236,238,255)', plot_bgcolor='rgba(232,236,238,255)')
        return fig

    elif explore_chart_type.get() == 'Bar':
        fig = px.bar(explore_df,
            x='TJ', y=left_node, color=right_node if right_node != 'Proxy' else left_node, color_discrete_map=eeud_colours.to_dict(),
            hover_data={right_node: True}
        )
        fig.update_traces(hovertemplate="%{y} / %{customdata[0]}<br>%{x:,.0f} TJ<extra></extra>")
        fig.update_traces(marker=dict(line=dict(color='rgba(0,0,0,0)', width=0)))
        fig.update_layout(legend=dict(
            orientation="h",
            yanchor="bottom", y=1.02,
            xanchor="left", x=0))
        if right_node == 'Proxy':
            fig.update_layout(showlegend=False)
        fig.update_layout(font_family="Barlow")
        fig.update_layout(modebar_remove=['zoom', 'pan', 'select', 'lasso', 'zoomin', 'zoomout', 'autoscale'])
        fig.update_layout(modebar_bgcolor='rgba(0,0,0,0)', modebar_color='rgba(22,64,87,255)')
        fig.update_layout(paper_bgcolor='rgba(232,236,238,255)', plot_bgcolor='rgba(232,236,238,255)')
        return fig

``` 

# Time Series

## Row

### Column {.sidebar}

<h5>Display</h5>

```{python}
ui.input_select("timeseries_category", "Category", choices=["End Use", "End Use Group", "Fuel", "Fuel Group", "Sector", "Sector Group", "Technology", "Technology Group"], selected="Fuel")
ui.input_select("timeseries_display", "Values", choices=["Total", "Proportional"], selected="Total")
```

<br/>
<h5>Filter</h5>

```{python}

ui.input_selectize('timeseries_end_use', "End Use", end_uses_list, multiple=True,
    options={
        'placeholder': "All End Uses",
        'plugins': ['clear_button']
    }
)

ui.input_selectize('timeseries_fuels', "Fuel Type", fuels_list, multiple=True, 
    options={
        'placeholder': "All Fuel Types",
        'plugins': ['clear_button']
    }
)

ui.input_selectize('timeseries_sectors', "Sector", sectors_list, multiple=True,
    options={
        'placeholder': "All Sectors",
        'plugins': ['clear_button']
    }
)

ui.input_selectize('timeseries_technologies', "Technology", technologies_list, multiple=True,
    options={
        'placeholder': "All Technologies",
        'plugins': ['clear_button']
    }
)

@reactive.Calc
def timeseries_eeud_filtered():
    data = eeud.copy()

    if len(input.timeseries_sectors()) > 0:
        data = data[data['Sector'].isin(input.timeseries_sectors())]

    if len(input.timeseries_fuels()) > 0:
        data = data[data['Fuel'].isin(input.timeseries_fuels())]

    if len(input.timeseries_technologies()) > 0:
        data = data[data['Technology'].isin(input.timeseries_technologies())]

    if len(input.timeseries_end_use()) > 0:
        data = data[data['EndUse'].isin(input.timeseries_end_use())]

    return data
```

<br/>
<h5>Data View</h5>

```{python}
@render.download(
    label="Download CSV",
    filename=lambda: f"timeseries-{date.today().isoformat()}-{np.random.randint(100, 999)}.csv"
)
async def download_timeseries_filtered_data():
    data = timeseries_eeud_filtered()  # Ensure that this fetch is thread-safe or handled correctly within the async context
    csv_data = data.to_csv(index=False)
    await asyncio.sleep(0.25)  # Simulating some processing time
    yield csv_data
```


### Column

```{python}
#| content: card-toolbar

@render.ui
def render_timeseries_area_button():
    btn_class = 'btn-primary' if timeseries_chart_type.get() == 'Area' else 'btn-secondary'
    return ui.input_action_button("timeseries_area", "Area Chart", class_=btn_class)

@render.ui
def render_timeseries_line_button():
    btn_class = 'btn-primary' if timeseries_chart_type.get() == 'Line' else 'btn-secondary'
    return ui.input_action_button("timeseries_line", "Line Chart", class_=btn_class)

@reactive.effect
def set_timeseries_area_chart():
    input.timeseries_area()
    with reactive.isolate():
        timeseries_chart_type.set('Area')

@reactive.effect
def set_timeseries_line_chart():
    input.timeseries_line()
    with reactive.isolate():
        timeseries_chart_type.set('Line')

```

```{python}
#| title: Energy Usage Time Series

timeseries_chart_type = reactive.value('Line')

@render_widget
def display_timeseries_chart():
    category = title_case(input.timeseries_category())
    timeseries_df = timeseries_eeud_filtered().groupby([category, 'Period']).sum(numeric_only=True).reset_index(drop=False)
    total = True
    if input.timeseries_display() == "Proportional":
        total = False
        total_tj_by_period = timeseries_df.groupby('Period')['TJ'].sum().reset_index(name='TotalTJ')
        timeseries_df = pd.merge(timeseries_df, total_tj_by_period, on='Period')
        timeseries_df['TJ'] = (timeseries_df['TJ'] / timeseries_df['TotalTJ']) * 100

    if timeseries_chart_type.get() == 'Alluvial':
        timeseries_links, timeseries_nodes = create_alluvial_links_for_dict(timeseries_eeud_filtered(), category, 'PeriodEndDate')
        fig = go.Figure(data=[go.Sankey(
            node = dict(
                pad = 15,
                thickness = 20,
                line = dict(width = 0),
                label = timeseries_nodes['label'],
                color = timeseries_nodes['color']
                ),
            link = dict(
                source = timeseries_links['source'],
                target = timeseries_links['target'],
                value = timeseries_links['value'],
                color = timeseries_links['color']
                )
        )])
        fig.update_layout(font_family="Barlow")
        fig.update_layout(modebar_remove=['zoom', 'pan', 'select', 'lasso', 'zoomin', 'zoomout', 'autoscale'])
        fig.update_layout(modebar_bgcolor='rgba(0,0,0,0)', modebar_color='rgba(22,64,87,255)')
        fig.update_layout(paper_bgcolor='rgba(232,236,238,255)', plot_bgcolor='rgba(232,236,238,255)')
        return fig

    elif timeseries_chart_type.get() == 'Line':
        fig = px.line(timeseries_df,
            y='TJ', x='Period', color=category, color_discrete_map=eeud_colours.to_dict(),
            markers=True, hover_data={category: True}).update_xaxes(dtick=1)
        fig.update_layout(yaxis=dict(title=f"{input.timeseries_display()} Energy Usage ({'TJ' if total else '%'})"))
        fig.update_layout(legend=dict(
            orientation="h",
            yanchor="bottom", y=1.02,
            xanchor="left", x=0)
            )
        if total:
            fig.update_traces(hovertemplate="%{customdata[0]} / %{x}<br>%{y:,.0f} TJ<extra></extra>")
        else:
            fig.update_traces(hovertemplate="%{customdata[0]} / %{x}<br>%{y:.1f}%<extra></extra>")
        fig.update_layout(font_family="Barlow")
        fig.update_layout(modebar_remove=['zoom', 'pan', 'select', 'lasso', 'zoomin', 'zoomout', 'autoscale'])
        fig.update_layout(modebar_bgcolor='rgba(0,0,0,0)', modebar_color='rgba(22,64,87,255)')
        fig.update_layout(paper_bgcolor='rgba(232,236,238,255)', plot_bgcolor='rgba(232,236,238,255)')
        return fig

    elif timeseries_chart_type.get() == 'Area':
        fig = px.area(timeseries_df,
            y='TJ', x='Period', color=category, color_discrete_map=eeud_colours.to_dict(),
            markers=True, hover_data={category: True}).update_xaxes(dtick=1)
        fig.update_layout(yaxis=dict(title=f"{input.timeseries_display()} Energy Usage ({'TJ' if total else '%'})"))
        fig.update_layout(legend=dict(
            orientation="h",
            yanchor="bottom", y=1.02,
            xanchor="left", x=0)
            )
        if total:
            fig.update_traces(hovertemplate="%{customdata[0]} / %{x}<br>%{y:,.0f} TJ<extra></extra>")
        else:
            fig.update_traces(hovertemplate="%{customdata[0]} / %{x}<br>%{y:.1f}%<extra></extra>")
        fig.update_layout(font_family="Barlow")
        fig.update_layout(modebar_remove=['zoom', 'pan', 'select', 'lasso', 'zoomin', 'zoomout', 'autoscale'])
        fig.update_layout(modebar_bgcolor='rgba(0,0,0,0)', modebar_color='rgba(22,64,87,255)')
        fig.update_layout(paper_bgcolor='rgba(232,236,238,255)', plot_bgcolor='rgba(232,236,238,255)')
        return fig

``` 

# Data

## Row

### Column {.sidebar}

<h5>Filter</h5>

```{python}
ui.input_selectize('data_end_use', "End Use", end_uses_list, multiple=True,
    options={
        'placeholder': "All End Uses",
        'plugins': ['clear_button']
    }
)

ui.input_selectize('data_fuels', "Fuel Type", fuels_list, multiple=True, 
    options={
        'placeholder': "All Fuel Types",
        'plugins': ['clear_button']
    }
)

ui.input_selectize('data_sectors', "Sector", sectors_list, multiple=True,
    options={
        'placeholder': "All Sectors",
        'plugins': ['clear_button']
    }
)

ui.input_selectize('data_technologies', "Technology", technologies_list, multiple=True,
    options={
        'placeholder': "All Technologies",
        'plugins': ['clear_button']
    }
) 

ui.input_slider('data_period', "Period Range", min=min(years_list), max=max(years_list),
    drag_range=True, value=(min(years_list), max(years_list)), sep='')


@reactive.Calc
def data_eeud_filtered():
    data = eeud.copy()

    if len(input.data_sectors()) > 0:
        data = data[data['Sector'].isin(input.data_sectors())]

    if len(input.data_fuels()) > 0:
        data = data[data['Fuel'].isin(input.data_fuels())]

    if len(input.data_technologies()) > 0:
        data = data[data['Technology'].isin(input.data_technologies())]

    if len(input.data_end_use()) > 0:
        data = data[data['EndUse'].isin(input.data_end_use())]

    data = data[data['Period'].between(input.data_period()[0], input.data_period()[1], inclusive='both')]

    return data
```

<br/>
<h5>Data View</h5>

```{python}
@render.download(
    label="Download CSV",
    filename=lambda: f"data-{date.today().isoformat()}-{np.random.randint(100, 999)}.csv"
)
async def download_data_filtered_data():
    data = data_eeud_filtered()  # Ensure that this fetch is thread-safe or handled correctly within the async context
    csv_data = data.to_csv(index=False)
    await asyncio.sleep(0.25)  # Simulating some processing time
    yield csv_data
```

### Column

```{python} 
@render.data_frame
def dataview():
    return render.DataGrid(data_eeud_filtered().drop(['SectorANZSIC', 'PeriodEndDate', 'Transport'], axis=1), height="100%", width="100%", summary=False)
``` 

# About

## Row

### Column

::: {.card .borderless .fill}

### **Energy End Use Database (EEUD)**

<br/>

<p>Energy End Use Database (EEUD) is a unique New Zealand data asset maintained by Energy Efficiency and Conservation Authority (EECA) enabling insights and analysis of energy use across sectors and technology by government, industry, and academia.</p>

<p>The EEUD provides annual estimates of how energy is used across the New Zealand economy. Delivered energy estimates are provided for fuel types, sectors, end uses and technologies. The current published data covers years 2017 to 2022. The data is always released for the previous year soon after the MBIE Energy Balances are released.</p>

<p>Energy use estimates are derived using a *top down* approach based on MBIE's annual high-level sector/fuel energy demand data and proportioned into further disaggregated sectors, end use applications and technology values using *bottom up* data held by EECA.</p>

#### **Short guide on categories in the database**

The EEUD is split into four categories – Sector, Fuel Type, End Use, and Technology. Each category has two levels (group level and disaggregated level), as tabled below with examples. The levels are shown in the tool as filter options in the dropdown boxes (i.e., the user can select to view the data by Sector Group, or by Sector for more disaggregation. For complete lists refer to the documentation linked below.
<table>
<thead>
  <tr>
    <th>Category</th>
    <th>Level</th>
    <th>Examples</th>
  </tr>
</thead>
<tbody>
  <tr>
    <td rowspan="2">Sector</td>
    <td>Sector Group</td>
    <td>Industrial, Residential</td>
  </tr>
  <tr>
    <td>Sector</td>
    <td>Dairy Product Manufacturing, Mining</td>
  </tr>
  <tr>
    <td rowspan="2">Fuel Type</td>
    <td>Fuel Group</td>
    <td>Fossil Fuels (direct use), Renewables (direct use), Electricity (direct use)</td>
  </tr>
  <tr>
    <td>Fuel</td>
    <td>Coal, Natural Gas, Electricity</td>
  </tr>
  <tr>
    <td rowspan="2">End Use</td>
    <td>End Use Group</td>
    <td>Heating, Electronics and Lighting</td>
  </tr>
  <tr>
    <td>End Use</td>
    <td>Low Temperature Heat (<100 C), Water Heating, Lighting</td>
  </tr>
  <tr>
    <td rowspan="2">Technology</td>
    <td>Technology Group</td>
    <td>Heating/Cooling Devices, Stationary Motors</td>
  </tr>
  <tr>
    <td>Technology</td>
    <td>Boiler Systems, Resistance Heaters</td>
  </tr>
</tbody>
</table>

&nbsp;

#### **Find out more about the Energy End Use Database (EEUD)**

To learn more about the methodology check out the document *[Energy End Use Database (EEUD) - Key insights and methodology](https://www.eeca.govt.nz/assets/EECA-Resources/Research-papers-guides/EECA-EEUD-Methodology-May-2024.pdf)*.

The full dataset is available here: *[EEUD Data 2017-2022 May 2024](https://www.eeca.govt.nz/assets/EECA-Resources/Research-papers-guides/EEUD-Data-2017-2022-May-2024.xlsx)*.

For feedback and more information, please email [info@eeca.govt.nz](mailto: info@eeca.govt.nz?subject=Energy End Use Database) with the subject line *Energy End Use Database*.

:::

### {.sidebar width=40%}

::: {.card .flow}

##### **Release notes**

**Version 1.3**

* 2022 data added for all sectors.
* Dashboard redesigned and rebuilt with Quarto and Shiny for Python.
* Released on the 6th of June 2024.

**Version 1.2** 

* 2021 data added for all sectors. 
* Released on the 23rd of March 2023.

**Version 1.1**

* Transport data added to the tool, allowing users to split by Vehicle Type, Technology and Fuel Type. 
* For Stationary Energy, Heating/Cooling was split into two separate categories. 
* Released on the 20th of April 2022.

**Version 1.0**

* Initial release of the Energy End Use Database (EEUD), built with R Shiny.
* Released on the 3rd of November 2021.

Keep up to date on new data releases through the EECA Newsletter ([sign up here](https://www.eeca.govt.nz/about/get-in-touch/sign-up-to-our-newsletters/)) and check the website frequently for updates.

:::

::: {.card .flow}

<br/>

<img src="https://www.data.govt.nz/assets/Uploads/CCANZ-logo__ScaleWidthWzc5NV0.png" alt="Creative Commons Aotearoa New Zealand" height="64px" style="mix-blend-mode: multiply;"/>
&nbsp;
<img src="https://upload.wikimedia.org/wikipedia/commons/f/fa/Creative_commons_license_with_attribution.png" alt="CC BY" height="52px" style="vertical-align: top; padding-top: 6px;"/><br/>
This work is licensed under a Creative Commons Attribution 4.0 New Zealand License.
:::
